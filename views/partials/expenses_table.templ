package partials

import (
	"split/models"
	"strconv"
	"split/views/components"
	"split/repositories"
	"fmt"
)

templ ExpensesTable(entries []interface{}, categories []models.Category, isLastOffset bool) {
	@components.Icons(categories)
	<div id="is-last-offset" class="hidden">{ strconv.FormatBool(isLastOffset) }</div>
	<div class="overflow-x-auto">
		<table class="table">
			<thead>
				<tr>
					<!-- <th> -->
					<!-- 	<label> -->
					<!-- 		<input type="checkbox" class="checkbox"/> -->
					<!-- 	</label> -->
					<!-- </th> -->
				</tr>
			</thead>
			<tbody>
				for _, entry := range entries {
					<tr
						class="border-b-2 border-base-200 pb-2"
						x-data={ templ.JSONString(entry) }
					>
						switch entry := entry.(type) {
							case models.Settlement:
								<td
									:class="SettledToZero && 'rainbow-text-soft'"
									hx-get={ "/partials/settlements/edit/" + strconv.Itoa(int(entry.ID)) }
									hx-trigger="click"
									hx-target="#modal-container"
									onclick="baseModal.showModal()"
								>
									<strong>
										if (entry.SettledToZero) {
											<span>Settled up! ðŸŽ‰</span>
										} else {
											<span>Settlement</span>
										}
									</strong>
								</td>
								<td class="text-right">
									{ entry.SettledBy.Username } paid <strong x-text="FormatAsCurrency(CurrencyCode, Amount)"></strong>
									<br/>
									<span class="badge badge-ghost badge-sm" x-text="LocalizeDate(SettlementDate)"></span>
								</td>
							case repositories.ExpenseWithFxRate:
								<!-- <th> -->
								<!-- 	<label> -->
								<!-- 		<input type="checkbox" class="checkbox"/> -->
								<!-- 	</label> -->
								<!-- </th> -->
								<td>
									<div
										class="flex cursor-pointer items-center gap-3"
										hx-get={ "/partials/expenses/edit/" + strconv.Itoa(int(entry.ID)) }
										hx-trigger="click"
										hx-target="#modal-container"
										onclick="baseModal.showModal()"
									>
										@components.Icon(entry.Category.Icon)
										<div>
											<div class="font-bold">{ entry.Title }</div>
											<div class="text-sm opacity-50">
												{ entry.PaidBy.Username } paid
												<span x-text="FormatAsCurrency(Currency.Code, Amount)"></span>
											</div>
											if entry.FxRate != 0 && entry.FxRate != 1 {
												<span
													class="badge badge-accent badge-sm"
													x-text="FormatAsCurrency('USD', Amount / parseFloat(fx_rate))"
												></span>
											}
										</div>
									</div>
								</td>
								if len(entry.ExpenseSplits) > 0 {
									<td class="flex flex-col items-end space-y-1 text-right">
										<span>{ entry.ExpenseSplits[0].User.Username } owes <strong x-html="FormatAsCurrency(Currency.Code, getExpenseSplitAmount(Amount, ExpenseSplits[0]))"></strong></span>
										<span>
											switch entry.ExpenseSplits[0].SplitType {
												case models.Pct:
													<span x-show="ExpenseSplits[0].SplitValue !== 50" class="badge badge-neutral badge-sm">{ fmt.Sprintf("%.0f", entry.ExpenseSplits[0].SplitValue) }%</span>
												case models.Amt:
													<span class="badge badge-neutral badge-sm" x-text="Math.round(ExpenseSplits[0].SplitValue / Amount * 100) + '%'"></span>
											}
											if entry.FxRate != 0 && entry.FxRate != 1 {
												<span
													class="badge badge-accent badge-sm"
													x-text="FormatAsCurrency('USD', getExpenseSplitAmount(Amount, ExpenseSplits[0]) / parseFloat(fx_rate))"
												></span>
											}
										</span>
										<span class="badge badge-ghost badge-sm" x-text="LocalizeDate(PaidDate)"></span>
									</td>
								}
						}
					</tr>
				}
			</tbody>
		</table>
	</div>
	<script>
		function getExpenseSplitAmount(amount, expenseSplit) {
			if (expenseSplit.SplitType == 'pct') {
				return amount * expenseSplit.SplitValue / 100
			} else if (expenseSplit.SplitType == 'amt') {
				return expenseSplit.SplitValue
			}
		}
	</script>
}
