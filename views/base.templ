package views

import (
	"split/views/components"
)

templ Base() {
	<!DOCTYPE html>
	<html lang="en">
		@components.Header()
		<body class="root" x-data>
			<div class="flex h-screen">
				<main class="min-h-screen w-full">
					@components.Nav()
					<div
						id="main-content"
						class="container mx-auto px-4 pb-24 sm:w-1/3"
					>
						{ children... }
					</div>
				</main>
				@components.Modal()
				<div
					class="toast toast-top"
					x-show="$store.global.toasts.length > 0"
					x-transition:enter.delay.50ms
					x-cloak
				>
					<template x-for="toast in $store.global.toasts">
						<div
							id="error-toast"
							class="alert max-w-xs overflow-auto p-4"
							:class="{
								'alert-error': toast.toastType === 'error',
								'alert-success': toast.toastType === 'success'
							}"
							x-text="toast.toastText"
						></div>
					</template>
				</div>
			</div>
		</body>
		<script>
			const MAX_DIGITS = 5
			const ERROR_TOAST_TIMEOUT = 5000 // milliseconds
			const TOAST_TYPES = {
				ERROR: 'error',
				SUCCESS: 'success',
			}

			function FormatAsCurrency(currency, amount) {
				if (!currency) {
					currency = 'USD';
				}

				const totalDigitsWithCents = amount.toFixed(2).replace('.', '').length

				let formatter = new Intl.NumberFormat('en-US', {
					style: 'currency',
					currency: currency,
					maximumFractionDigits: totalDigitsWithCents > MAX_DIGITS ? 0 : 2,
				});
				return formatter.format(amount);
			}

			function LocalizeDate(isoString) {
				return new Date(isoString).toLocaleDateString(undefined, {
					month: 'short',
					day: '2-digit'
				});
			}

			document.addEventListener('alpine:init', () => {
				Alpine.store('global', {
					toasts: [],

					showErrorToast(message) {
						newToast = {
							toastText: message,
							toastType: TOAST_TYPES.ERROR,
						}
						this.pushToast(newToast)
					},

					showSuccessToast(message) {
						newToast = {
							toastText: message,
							toastType: TOAST_TYPES.SUCCESS,
						}
						this.pushToast(newToast)
					},

					pushToast(toast) {
						this.toasts.push(toast)
						setTimeout(() => {
							this.toasts.shift()
						}, ERROR_TOAST_TIMEOUT)
					},
				})
			})

			document.body.addEventListener('htmx:responseError', function(event) {
				if (!event.detail.xhr.status.toString().startsWith('2')) {
					Alpine.store('global').showErrorToast(event.detail.xhr.responseText)
				}
			});

			document.body.addEventListener('htmx:afterRequest', function(event) {
				if (event.detail.xhr.status === 200 && event.detail.requestConfig.verb !== 'get') {
					switch (event.detail.requestConfig.verb) {
						case 'post':
							Alpine.store('global').showSuccessToast('Successful Update')
							break
						case 'delete':
							Alpine.store('global').showSuccessToast('Successful Delete')
							break
					}
				}
			});
		</script>
	</html>
}
