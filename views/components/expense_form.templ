package components

import "split/models"
import "fmt"
import "split/helpers"

func getExpensePostTarget(expense *models.Expense) string {
	if expense == nil {
		return "/api/expenses"
	}
	return "/api/expenses/" + fmt.Sprintf("%d", expense.ID)
}

func countryCodeToFlag(code string) string {
	// Generate the flag emoji
	flag := ""
	for _, char := range code {
		flag += string(rune(127397 + char))
	}

	return flag
}

templ ExpenseForm(expense *models.Expense, categories []models.Category, currencies []models.Currency, users []models.User) {
	<div class="w-full max-w-2xl">
		@templ.JSONScript("expense", expense)
		<span id="current-user-id" class="hidden">{ helpers.GetContextUserID(ctx) }</span>
		<h2 class="mb-6 text-2xl font-bold">
			if expense == nil {
				Add New Expense
			} else {
				Edit Expense: "{ expense.Title }"
			}
		</h2>
		<form
			hx-post={ getExpensePostTarget(expense) }
			@htmx:after-request="baseModal.close()"
			hx-swap="none"
			x-data="init"
		>
			<div class="mb-4">
				<label class="input input-bordered flex items-center gap-2">
					Name
					<input x-model="Title" autofocus type="text" id="title" name="title" class="grow" required/>
				</label>
			</div>
			<div class="mb-4">
				<div class="join w-full">
					<label class="input join-item input-bordered flex w-7/12 items-center gap-2 sm:w-full">
						Amount
						<input x-model="Amount" type="number" id="amount" name="amount" class="grow" required/>
					</label>
					<select
						x-model="currencyCode"
						name="currencyCode"
						class="join-item select select-bordered w-5/12 sm:w-auto"
						@change="fxRateUSD = $el.options[$el.selectedIndex].getAttribute('data-fx-rate-usd')"
					>
						for _, currency := range currencies {
							<option
								value={ currency.Code }
								data-fx-rate-usd={ templ.JSONString(currency.LatestFxRateUSD) }
							>{ countryCodeToFlag(currency.TwoCharCountryCode) } { currency.Code }</option>
						}
					</select>
				</div>
				<div class="mt-2 flex">
					<span x-show="currencyCode !== 'USD'" class="text-sm">
						Equivalent to: <span x-text="FormatAsCurrency('USD', Amount / parseFloat(fxRateUSD))"></span>
					</span>
				</div>
			</div>
			<div class="mb-4">
				<div class="join w-full">
					<label class="input join-item input-bordered flex w-8/12 items-center gap-2 sm:w-full">
						<span>Split Amt</span>
						<input x-model="SplitValue" type="number" id="splitValue" name="SplitValue" class="grow" required/>
					</label>
					<input x-model="SplitType" value="pct" class="btn join-item w-2/12 sm:w-auto" type="radio" name="SplitType" aria-label="%"/>
					<input x-model="SplitType" value="amt" class="btn join-item w-2/12 sm:w-auto" type="radio" name="SplitType" aria-label="$"/>
				</div>
				<div class="mt-2 flex">
					<span class="text-sm">
						Equivalent to: <strong x-text="FormatAsCurrency(currencyCode, calculateEquivalentAmount($data))"></strong>
						<span x-show="currencyCode !== 'USD'" class="text-sm">
							(<span x-text="FormatAsCurrency('USD', calculateEquivalentAmount($data) / parseFloat(fxRateUSD))"></span>)
						</span>
					</span>
				</div>
			</div>
			<div class="mb-4 flex space-x-4">
				<div class="w-1/2">
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Paid By</span>
						</div>
						<select
							x-model="paidByID"
							id="paidByID"
							name="paidByID"
							@change="splitByID = selectNextOption(document.getElementById('splitByID'), paidByID)"
							class="select select-bordered"
						>
							for _, user := range users {
								<option value={ fmt.Sprintf("%d", user.ID) }>{ user.Username }</option>
							}
						</select>
					</label>
				</div>
				<div class="w-1/2">
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Split By</span>
						</div>
						<select
							x-model="splitByID"
							id="splitByID"
							name="splitByID"
							@change="paidByID = selectNextOption(document.getElementById('paidByID'), splitByID)"
							class="select select-bordered"
						>
							for _, user := range users {
								<option value={ fmt.Sprintf("%d", user.ID) }>{ user.Username }</option>
							}
						</select>
					</label>
				</div>
			</div>
			<div class="mb-4">
				@Typeahead("categoryID", "CategoryID", "Search Categories...", categories)
			</div>
			<div class="mb-4">
				<textarea x-model="Notes" id="notes" name="notes" class="textarea textarea-bordered w-full" placeholder="Notes"></textarea>
			</div>
			<div
				x-ref="recurrenceForm"
				x-show="showRecurrenceForm"
				x-transition
				x-cloak
			>
				<h4 class="mb-6 text-2xl font-bold">
					Schedule Expense
				</h4>
				<input type="hidden" x-model="showRecurrenceForm" name="IsScheduled"/>
				<div class="mb-4 flex space-x-4">
					<div class="w-1/2">
						<label class="form-control w-full max-w-xs">
							<div class="label">
								<span class="label-text">Recurrence Type</span>
							</div>
							<select x-model="RecurrenceType" name="RecurrenceType" id="recurrenceType" class="select select-bordered grow" required>
								<option value="monthly">Monthly</option>
								<option value="daily">Daily</option>
								<option value="weekly">Weekly</option>
								<option value="yearly">Yearly</option>
							</select>
						</label>
					</div>
					<div class="w-1/2">
						<label class="form-control w-full max-w-xs">
							<div class="label">
								<span class="label-text">Recurrence Interval</span>
							</div>
							<input type="number" x-model="RecurrenceInterval" name="RecurrenceInterval" id="recurrenceInterval" class="input input-bordered grow" required placeholder="e.g. 2 weeks"/>
						</label>
					</div>
				</div>
				<div class="mb-4">
					<label class="input input-bordered flex items-center gap-2">
						Start Date
						<input x-model="StartDate" type="date" name="StartDate" id="startDate" class="grow" required/>
					</label>
				</div>
				<div class="mb-4">
					<label class="input input-bordered flex items-center gap-2">
						End Date
						<input x-model="EndDate" type="date" name="EndDate" id="endDate" class="grow"/>
					</label>
				</div>
			</div>
			<div class="flex items-center justify-between">
				<div>
					if expense != nil {
						<button class="btn btn-error" type="button" hx-delete={ "/api/expenses/" + fmt.Sprintf("%d", expense.ID) }>
							Delete
						</button>
					} else {
						<button
							class="btn btn-secondary w-full "
							type="button"
							@click="showRecurrenceForm = !showRecurrenceForm; $nextTick(() => { $refs.recurrenceForm.scrollIntoView({ behavior: 'smooth' }); })"
						>
							<span x-text="showRecurrenceForm ? 'Hide Scheduler' : 'Schedule'"></span>
						</button>
					}
				</div>
				<div class="flex space-x-2">
					<button class="btn btn-neutral" type="button" onclick="baseModal.close()">
						Cancel
					</button>
					<button type="submit" class="btn btn-primary">
						Submit
					</button>
				</div>
			</div>
			if expense != nil {
				<div class="mt-4 w-full">
					<button
						class="btn btn-secondary w-full"
						type="button"
						@click="showRecurrenceForm = !showRecurrenceForm; $nextTick(() => { $refs.recurrenceForm.scrollIntoView({ behavior: 'smooth' }); })"
					>
						<span x-text="showRecurrenceForm ? 'Hide Scheduler' : 'Schedule'"></span>
					</button>
				</div>
			}
		</form>
		<script>
			function selectNextOption(selectElement, targetValue) {
				const options = selectElement.options;
				let foundTarget = false;

				for (let i = 0; i < options.length; i++) {
					if (foundTarget) {
						selectElement.selectedIndex = i;
						return options[i].value;
					}

					if (options[i].value === targetValue) {
						foundTarget = true;
					}
				}

				return null
			}
			Alpine.data('init', () => {
				const data = JSON.parse(document.getElementById('expense').textContent)
				const currentUserID = document.getElementById('current-user-id').innerText
				const defaultPaidByID = data?.PaidByID || currentUserID
				const otherUserID = selectNextOption(document.getElementById('paidByID'), currentUserID)
				const expenseSplit = data?.ExpenseSplits.length ? data.ExpenseSplits[0] : {
					UserID: otherUserID,
					SplitType: 'pct',
					SplitValue: 50,
				}
				const defaultCategoryDisplay = data?.Category ? `${data.Category.Type} > ${data.Category.Name}` : null
				const defaultCurrency = data?.Currency.Code || 'USD'
				const fxRateUSD = data?.Currency.LatestFxRateUSD || null
				return {
					expenseID: data?.ID || null,
					Title: null,
					Amount: null,
					Notes: null,
					currencyCode: defaultCurrency,
					fxRateUSD: fxRateUSD,
					defaultSearchDisplay: defaultCategoryDisplay,
					CategoryID: null,
					paidByID: defaultPaidByID,
					splitByID: expenseSplit.UserID,
					SplitType: expenseSplit.SplitType,
					SplitValue: expenseSplit.SplitValue,
					SplitTypeChecked: expenseSplit.SplitType === 'pct',
					showRecurrenceForm: false,
					isEdit: data !== null,
					RecurrenceInterval: 1,
					RecurrenceType: 'monthly',
					StartDate: new Date().toISOString().split('T')[0],
					EndDate: null,
					calculateEquivalentAmount($data) {
						if ($data.SplitType === 'pct') {
							return ($data.SplitValue / 100) * $data.Amount
						}
						return $data.SplitValue
					},
					...data,
				}
			})
		</script>
	</div>
}
