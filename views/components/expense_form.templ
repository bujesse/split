package components

import "split/models"
import "fmt"
import "context"

func getExpensePostTarget(expense *models.Expense) string {
	if expense == nil {
		return "/api/expenses"
	}
	return "/api/expenses/" + fmt.Sprintf("%d", expense.ID)
}

func getContextUserID(ctx context.Context) string {
	if username, ok := ctx.Value("currentUserID").(string); ok {
		return username
	}
	return ""
}

templ ExpenseForm(expense *models.Expense, categories []models.Category, currencies []models.Currency, users []models.User) {
	<div class="w-full max-w-2xl">
		@templ.JSONScript("expense", expense)
		<span id="current-user-id" class="hidden">{ getContextUserID(ctx) }</span>
		<h2 class="mb-6 text-2xl font-bold">
			if expense == nil {
				Add New Expense
			} else {
				Edit Expense: "{ expense.Title }"
			}
		</h2>
		<form hx-post={ getExpensePostTarget(expense) } @htmx:after-request="$el.reset(); baseModal.close()" hx-swap="none" x-data="init">
			<div class="mb-4">
				<label class="input input-bordered flex items-center gap-2">
					Name
					<input x-model="Title" autofocus type="text" id="title" name="title" class="grow" required/>
				</label>
			</div>
			<div class="mb-4">
				<label class="input input-bordered flex items-center gap-2">
					Amount
					<input x-model="Amount" type="number" id="amount" name="amount" class="grow" required/>
					<button type="button" x-text="currencyCode" class="badge badge-neutral"></button>
				</label>
			</div>
			<div class="mb-4 flex space-x-4">
				<div class="w-1/2">
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Paid By</span>
						</div>
						<select
							x-model="paidByID"
							id="paidByID"
							name="paidByID"
							@change="splitByID = selectNextOption(document.getElementById('splitByID'), paidByID)"
							class="select select-bordered"
						>
							for _, user := range users {
								<option value={ fmt.Sprintf("%d", user.ID) }>{ user.Username }</option>
							}
						</select>
					</label>
				</div>
				<div class="w-1/2">
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Paid By</span>
						</div>
						<select
							x-model="splitByID"
							id="splitByID"
							name="splitByID"
							@change="paidByID = selectNextOption(document.getElementById('paidByID'), splitByID)"
							class="select select-bordered"
						>
							for _, user := range users {
								<option value={ fmt.Sprintf("%d", user.ID) }>{ user.Username }</option>
							}
						</select>
					</label>
				</div>
			</div>
			<div class="mb-4">
				<label class="input input-bordered flex items-center gap-2">
					Split Value
					<input x-model="SplitValue" type="number" id="splitValue" name="SplitValue" class="grow" required/>
					<div class="flex rounded-md shadow-sm">
						<label class="swap swap-rotate bg-neutral text-neutral-content text-center px-4 rounded-full">
							<!-- this hidden checkbox controls the state -->
							<input type="checkbox" x-model="SplitTypeChecked" x-effect="SplitType = SplitTypeChecked ? 'pct' : 'amt'"/>
							<div
								class="swap-on"
								type="button"
							>
								%
							</div>
							<div
								class="swap-off"
								type="button"
							>
								$
							</div>
						</label>
						<input x-model="SplitType" type="hidden" name="SplitType"/>
					</div>
				</label>
				<div class="mt-2 flex">
					<span class="text-sm">Equivalent to: $<span x-text="calculateEquivalentAmount($data)"></span></span>
				</div>
			</div>
			<div class="mb-4">
				<label class="form-control w-full">
					<select
						x-model="CategoryID"
						id="categoryID"
						name="categoryID"
						class="select select-bordered"
					>
						<option value="">Select Category</option>
						for _, category := range categories {
							<option value={ fmt.Sprintf("%d", category.ID) }>{ category.Type } > { category.Name }</option>
						}
					</select>
				</label>
			</div>
			<div class="mb-4">
				<textarea x-model="Notes" id="notes" name="notes" class="textarea textarea-bordered w-full" placeholder="Notes"></textarea>
			</div>
			<div class="flex justify-between items-center">
				<div>
					if expense != nil {
						<button class="btn btn-warning" type="button">
							Delete
						</button>
					}
				</div>
				<div class="flex space-x-2">
					<button class="btn btn-neutral" type="button" onclick="baseModal.close()">
						Cancel
					</button>
					<button type="submit" class="btn btn-primary">
						Submit
					</button>
				</div>
			</div>
		</form>
		<script>
			function selectNextOption(selectElement, targetValue) {
				const options = selectElement.options;
				let foundTarget = false;

				for (let i = 0; i < options.length; i++) {
					if (foundTarget) {
						selectElement.selectedIndex = i;
						return options[i].value;
					}

					if (options[i].value === targetValue) {
						foundTarget = true;
					}
				}

				return null; // if the target value is the last option or not found
			}
			Alpine.data('init', () => {
				const data = JSON.parse(document.getElementById('expense').textContent)
				const currentUserID = document.getElementById('current-user-id').innerText
				const defaultPaidByID = data?.PaidByID || currentUserID
				const otherUserID = selectNextOption(document.getElementById('paidByID'), currentUserID)
				const expenseSplit = data?.ExpenseSplits.length ? data.ExpenseSplits[0] : {
					UserID: otherUserID,
					SplitType: 'pct',
					SplitValue: 50,
				}
				const defaultCurrency = data?.Currency.Code || 'USD'
				return {
					Title: null,
					Amount: null,
					Notes: null,
					currencyCode: defaultCurrency,
					CategoryID: null,
					paidByID: defaultPaidByID,
					splitByID: expenseSplit.UserID,
					SplitType: expenseSplit.SplitType,
					SplitValue: expenseSplit.SplitValue,
					SplitTypeChecked: expenseSplit.SplitType === 'pct',
					calculateEquivalentAmount($data) {
						if ($data.SplitType === 'pct') {
							return (($data.SplitValue / 100) * $data.Amount).toFixed(2)
						}
						return Number($data.SplitValue).toFixed(2)
					},
					...data,
				}
			})
		</script>
	</div>
}
