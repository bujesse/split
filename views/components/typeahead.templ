package components

templ Typeahead[T any](name string, model string, placeholder string, items []T) {
	<div
		x-data="typeaheadInit($el, $data)"
		class="relative"
		items={ templ.JSONString(items) }
		model={ model }
		@keydown.down.prevent="focusNextItem()"
		@keydown.up.prevent="focusPrevItem()"
		@keydown.enter.prevent="selectItem(activeItem)"
		@keydown.tab.stop="open = false; activeItem = null"
	>
		<label class="input input-bordered flex items-center gap-2">
			<input
				type="text"
				class="grow"
				placeholder={ placeholder }
				x-model="search"
				@focus="open = true"
				@keydown="open = true"
				@keydown.escape="open = false; activeItem = null"
				@click.outside="open = false; activeItem = null"
				@keydown.escape="open = false; activeItem = null"
			/>
			<input type="hidden" x-model={ model } name={ name }/>
			<span
				x-show="search !== ''"
				@click="search = ''; open = false; activeItem = null"
				class="badge badge-ghost cursor-pointer"
			>âœ•</span>
		</label>
		<div x-show="open" class="absolute w-full">
			<ul tabindex="0" class="menu bg-base-200 rounded-box w-full block max-h-44 overflow-y-scroll">
				<template x-for="item in filteredItems" :key="item.ID">
					<li>
						<a @click="selectItem(item)" x-text="getDisplayName(item)" :class="activeItem === item && 'active'"></a>
					</li>
				</template>
			</ul>
		</div>
	</div>
	<script>
		function typeaheadInit($el, $data) {
			const items = JSON.parse($el.getAttribute('items'))
			const model = $el.getAttribute('model')
			const defaultDisplay = $el.getAttribute('defaultDisplay')
			return {
				search: $data.defaultSearchDisplay || '',
				open: false,
				items: items,
				activeItem: null,
				getDisplayName(item) {
					return item.Type + ' > ' + item.Name
				},
				filteredItems() {
					return this.items.filter(item => {
						return this.getDisplayName(item).toLowerCase().includes(this.search.toLowerCase())
					})
				},
				focusItem(item) {
					this.activeItem = item
				},
				focusNextItem() {
					if (!this.open) this.open = true
					const items = this.filteredItems()
					const index = items.indexOf(this.activeItem)
					if (index === -1) {
						this.activeItem = items[0]
					} else if (index < items.length - 1) {
						this.activeItem = items[index + 1]
					}
				},
				focusPrevItem(item) {
					if (!this.open) this.open = true
					const items = this.filteredItems()
					const index = items.indexOf(this.activeItem)
					if (index === -1) {
						this.activeItem = items[items.length - 1]
					} else if (index > 0) {
						this.activeItem = items[index - 1]
					}
				},
				selectItem(item) {
					if (!item) return
					const value = item.ID
					this[model] = value
					this.search = this.getDisplayName(item)
					this.open = false
					this.activeItem = null
				}
			}
		}
	</script>
}
