package components

import "fmt"
import "split/models"
import "split/helpers"

func getSettlementPostTarget(settlement *models.Settlement) string {
	if settlement == nil {
		return "/api/settlements"
	}
	return "/api/settlements/" + fmt.Sprintf("%d", settlement.ID)
}

templ SettlementsForm(settlement *models.Settlement, owedDetails map[string]interface{}, currencies []models.Currency, users []models.User) {
	<div class="w-full max-w-2xl">
		@templ.JSONScript("settlement", settlement)
		@templ.JSONScript("owedDetails", owedDetails)
		<span id="current-user-id" class="hidden">{ helpers.GetContextUserID(ctx) }</span>
		<h2 class="mb-6 text-2xl font-bold">
			if settlement == nil {
				Settle Up!
			} else {
				Edit Settlement
			}
		</h2>
		<form hx-post={ getSettlementPostTarget(settlement) } @htmx:after-request="baseModal.close()" hx-swap="none" x-data="init">
			<div class="mb-4">
				<div class="join w-full">
					<label class="input join-item input-bordered flex w-7/12 items-center gap-2 sm:w-full">
						Amount
						<input
							x-model="Amount"
							type="number"
							step="any"
							id="Amount"
							name="Amount"
							class="grow"
							required
							@change="Amount = parseFloat(Amount).toFixed(2); SettledToZero = Math.round((maxAmountOwed - Amount) * 100) === 0"
						/>
					</label>
					<select x-model="CurrencyCode" name="CurrencyCode" class="join-item select select-bordered w-5/12 sm:w-auto">
						for _, currency := range currencies {
							<option value={ currency.Code }>{ countryCodeToFlag(currency.TwoCharCountryCode) } { currency.Code }</option>
						}
					</select>
				</div>
				if owedDetails["whoOwesMostUsername"] != nil {
					<div class="mt-2 flex">
						<span class="text-sm">{ owedDetails["whoOwesMostUsername"].(string) } owes: <strong x-text="FormatAsCurrency('USD', maxAmountOwed)"></strong></span>
					</div>
					<div class="mt-2 flex">
						<span class="text-sm">After this, { owedDetails["whoOwesMostUsername"].(string) } will owe: <strong x-text="FormatAsCurrency('USD', Math.max(maxAmountOwed - Amount, 0))"></strong></span>
					</div>
				}
			</div>
			<input
				class="hidden"
				x-model="SettledByID"
				id="SettledByID"
				name="SettledByID"
			/>
			<input
				class="hidden"
				x-model="SettledToZero"
				id="SettledToZero"
				name="SettledToZero"
			/>
			<div class="mb-4">
				<textarea x-model="Notes" id="notes" name="notes" class="textarea textarea-bordered w-full" placeholder="Notes"></textarea>
			</div>
			<div class="flex items-center justify-between">
				<div>
					if settlement != nil {
						<button class="btn btn-error" type="button" hx-delete={ "/api/settlements/" + fmt.Sprintf("%d", settlement.ID) }>
							Delete
						</button>
					}
				</div>
				<div class="flex space-x-2">
					<button class="btn btn-neutral" type="button" onclick="baseModal.close()">
						Cancel
					</button>
					<button type="submit" class="btn btn-primary">
						Submit
					</button>
				</div>
			</div>
		</form>
		<script>
			Alpine.data('init', () => {
				const data = JSON.parse(document.getElementById('settlement').textContent)
				const currentUserID = document.getElementById('current-user-id').innerText
				const defaultCurrency = data?.Currency.Code || 'USD'

				const owedDetails = JSON.parse(document.getElementById('owedDetails').textContent)
				const { maxAmountOwed, whoOwesMostUserID, maxAmountOwedBaseCcyTotal, userSettlements } = owedDetails
				const actualMaxAmountOwed = !!data ? maxAmountOwedBaseCcyTotal : maxAmountOwed
				return {
					Amount: actualMaxAmountOwed.toFixed(2),
					maxAmountOwed: actualMaxAmountOwed,
					Notes: null,
					CurrencyCode: defaultCurrency,
					SettledByID: whoOwesMostUserID,
					SettledToZero: true,
					...data,
				}
			})
		</script>
	</div>
}
